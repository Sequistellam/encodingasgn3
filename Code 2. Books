using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using System.Xml.Linq;
using CsvHelper;
using Newtonsoft.Json.Linq;
using OfficeOpenXml;

public class Book
{
    public string Category { get; set; }
    public string Title { get; set; }
    public string Author { get; set; }
    public string Year { get; set; }
    public string Price { get; set; }
}

class Program
{
    static async Task Main(string[] args)
    {
        // URLs for JSON, XML, and CSV data sources
        var jsonUrl = "https://raw.githubusercontent.com/Sequistellam/encodingasgn3/main/books.json";
        var xmlUrl = "https://raw.githubusercontent.com/Sequistellam/encodingasgn3/main/books.xml";
        var csvUrl = "https://raw.githubusercontent.com/Sequistellam/encodingasgn3/main/books.csv";

        // Ask the user to provide the directory where the 'books.xlsx' file will be created
        Console.WriteLine("Enter the directory where you want to create the 'books.xlsx' file:");
        var directory = Console.ReadLine();

        // Process JSON, XML, and CSV data asynchronously and retrieve lists of Book objects
        var booksJson = await ProcessJsonAsync(jsonUrl);
        var booksXml = await ProcessXmlAsync(xmlUrl);
        var booksCsv = await ProcessCsvAsync(csvUrl);

        // Write each list of books to separate Excel files
        WriteToExcel(Path.Combine(directory, "booksJSON.xlsx"), booksJson);
        WriteToExcel(Path.Combine(directory, "booksXML.xlsx"), booksXml);
        WriteToExcel(Path.Combine(directory, "booksCSV.xlsx"), booksCsv);

        // Merge all lists of books and write to a single Excel file
        var booksAll = new List<Book>();
        booksAll.AddRange(booksJson);
        booksAll.AddRange(booksXml);
        booksAll.AddRange(booksCsv);
        WriteToExcel(Path.Combine(directory, "books.xlsx"), booksAll);

        Console.ReadKey();
    }

    // Method to write a list of books to an Excel file
    public static void WriteToExcel(string path, List<Book> books)
    {
        using (var package = new ExcelPackage(new FileInfo(path)))
        {
            var worksheet = package.Workbook.Worksheets.Add("Books");

            // Headers
            worksheet.Cells[1, 1].Value = "Category";
            worksheet.Cells[1, 2].Value = "Title";
            worksheet.Cells[1, 3].Value = "Author";
            worksheet.Cells[1, 4].Value = "Year";
            worksheet.Cells[1, 5].Value = "Price";

            // Data
            for (int i = 0; i < books.Count; i++)
            {
                worksheet.Cells[i + 2, 1].Value = books[i].Category;
                worksheet.Cells[i + 2, 2].Value = books[i].Title;
                worksheet.Cells[i + 2, 3].Value = books[i].Author;
                worksheet.Cells[i + 2, 4].Value = books[i].Year;
                worksheet.Cells[i + 2, 5].Value = books[i].Price;
            }

            package.Save();
        }
    }

    // Method to process JSON data and return a list of Book objects
    public static async Task<List<Book>> ProcessJsonAsync(string url)
    {
        var books = new List<Book>();

        using (var client = new HttpClient())
        {
            var response = await client.GetStringAsync(url);
            var jObject = JObject.Parse(response);
            var bookObjects = jObject["bookstore"]["book"].Children();

            // Output data from JSON file to console for display
            Console.WriteLine("\nRead JSON File:");
            Console.WriteLine("Category".PadRight(15) + "Title".PadRight(25) + "Author".PadRight(50) + "Price");

            foreach (var bookObject in bookObjects)
            {
                var title = bookObject["title"]["__text"].ToString();
                var authors = bookObject["author"] is JArray ? bookObject["author"].Select(a => a.ToString()) : new[] { bookObject["author"].ToString() };
                var price = bookObject["price"].ToString();
                var category = bookObject["_category"].ToString();

                // Output book details to console
                Console.WriteLine($"{category.PadRight(15)} {title.PadRight(25)} {authors.First().PadRight(50)} {price}");

                foreach (var author in authors.Skip(1))
                {
                    Console.WriteLine($"{"".PadRight(15)} {"".PadRight(25)} {author.PadRight(50)}");
                }

                // Add each book to the list
                books.Add(new Book
                {
                    Category = category,
                    Title = title,
                    Author = string.Join(", ", authors),
                    Price = price
                    // Year is missing in your provided JSON structure. You may need to adjust this based on your actual data.
                });
            }
        }

        return books;
    }

    // Method to process XML data and return a list of Book objects
    public static async Task<List<Book>> ProcessXmlAsync(string url)
    {
        var books = new List<Book>();

        using (var client = new HttpClient())
        {
            var response = await client.GetStringAsync(url);
            var xDocument = XDocument.Parse(response);
            var bookElements = xDocument.Descendants("book");

            // Output data from XML file to console for display
            Console.WriteLine("\nRead XML File:");
            Console.WriteLine("Category".PadRight(15) + "Title".PadRight(25) + "Author".PadRight(50) + "Price");

            foreach (var bookElement in bookElements)
            {
                var title = bookElement.Element("title")?.Value;
                var authors = bookElement.Elements("author").Select(a => a.Value);
                var price = bookElement.Element("price")?.Value;
                var category = bookElement.Attribute("category")?.Value;

                // Output book details to console
                Console.WriteLine($"{category.PadRight(15)} {title.PadRight(25)} {authors.First().PadRight(50)} {price}");

                foreach (var author in authors.Skip(1))
                {
                    Console.WriteLine($"{"".PadRight(15)} {"".PadRight(25)} {author.PadRight(50)}");
                }

                // Add each book to the list
                books.Add(new Book
                {
                    Category = category,
                    Title = title,
                    Author = string.Join(", ", authors),
                    Price = price
                    // Year is missing in your provided XML structure. You may need to adjust this based on your actual data.
                });
            }
        }

        return books;
    }

    // Method to process CSV data and return a list of Book objects
    public static async Task<List<Book>> ProcessCsvAsync(string url)
    {
        var books = new List<Book>();

        using (var client = new HttpClient())
        using (var reader = new StreamReader(await client.GetStreamAsync(url)))
        using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
        {
            var records = csv.GetRecords<Book>();

            // Output data from CSV file to console for display
            Console.WriteLine("\nRead CSV File:");
            Console.WriteLine("Category".PadRight(15) + "Title".PadRight(25) + "Author".PadRight(50) + "Price");

            foreach (var record in records)
            {
                var authors = record.Author.Contains(",")
                    ? record.Author.Split(new[] { "," }, StringSplitOptions.RemoveEmptyEntries)
                    : new[] { record.Author };

                // Output book details to console
                Console.WriteLine($"{record.Category.PadRight(15)} {record.Title.PadRight(25)} {authors.First().PadRight(50)} {record.Price}");

                foreach (var author in authors.Skip(1))
                {
                    Console.WriteLine($"{"".PadRight(15)} {"".PadRight(25)} {author.PadRight(50)}");
                }

                // Add each book to the list
                books.Add(record);
            }
        }

        return books;
    }
}
